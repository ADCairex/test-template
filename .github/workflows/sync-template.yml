name: sync-template-to-projects

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  sync_template:
    name: Sync to ${{ matrix.repo }}
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    strategy:
      matrix:
        repo:
          - ADCairex/test-template-project-1
          - ADCairex/test-template-project-2

    env:
      TARGET_DIR: /tmp/target_repo

    steps:
      - name: Checkout template repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_TEMPLATE_PUSH }}

      - name: Set up Git config
        run: |
          git config --global user.name "Template Bot"
          git config --global user.email "bot@template.com"

      - name: Define sync branch name
        id: vars
        run: |
          echo "branch=${{ github.event.pull_request.head.ref }}-sync-template" >> $GITHUB_OUTPUT

      - name: Clone target repo
        run: |
          git clone https://x-access-token:${{ secrets.PAT_FOR_TEMPLATE_PUSH }}@github.com/${{ matrix.repo }} ${{ env.TARGET_DIR }}
          cd ${{ env.TARGET_DIR }}
          git checkout -b "${{ steps.vars.outputs.branch }}"

      - name: Sync template files
        run: |
          rsync -av --delete --exclude '.git/' --exclude '.github/' ./ ${{ env.TARGET_DIR }}/

      - name: Commit and push changes
        id: push_changes
        run: |
          cd ${{ env.TARGET_DIR }}
          git add .
          git commit -m "Sync from template: PR #${{ github.event.pull_request.head.ref }}" || echo "No changes to commit"

          # Intentar hacer push
          if ! git push origin "${{ steps.vars.outputs.branch }}"; then
            echo "push_failed=true" >> $GITHUB_OUTPUT

            # Intentar detectar archivos en conflicto
            git fetch origin main
            git merge origin/main || true
            git diff --name-only --diff-filter=U > /tmp/conflict_files.txt || true
          else
            echo "push_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create issue on conflict
        if: steps.push_changes.outputs.push_failed == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT_FOR_TEMPLATE_PUSH }}
        run: |
          cd ${{ env.TARGET_DIR }}

          # Leer archivos en conflicto
          if [ -s /tmp/conflict_files.txt ]; then
            CONFLICT_FILES=$(cat /tmp/conflict_files.txt | sed 's/^/- /')
          else
            CONFLICT_FILES="No se pudo determinar los archivos en conflicto autom√°ticamente. Revisa el estado del repositorio manualmente."
          fi

          gh issue create \
            --title "‚ùó Conflicto al sincronizar desde el template" \
            --body "‚ö†Ô∏è **Conflicto detectado al sincronizar el template en \`${{ matrix.repo }}\`**\n\n---\n\
                        **üîÄ Rama conflictiva:** \`${{ steps.vars.outputs.branch }}\`\n\
                        **üìå Acci√≥n requerida:** Revisa la rama generada y resuelve los conflictos manualmente.\n\
                        **üõ† Archivos en conflicto detectados:**\n${CONFLICT_FILES}\n\n\
                        Este conflicto ocurri√≥ tras el merge del PR #${{ github.event.pull_request.head.ref }} en el repositorio plantilla." \
            --repo ${{ matrix.repo }}

      - name: Create PR in target project
        if: steps.push_changes.outputs.push_failed == 'false'
        env:
          GH_TOKEN: ${{ secrets.PAT_FOR_TEMPLATE_PUSH }}
        run: |
          cd ${{ env.TARGET_DIR }}
          gh pr create \
            --title "Sync from template (PR #${{ github.event.pull_request.head.ref }})" \
            --body "Este PR incluye los cambios sincronizados desde el template tras el merge del PR #${{ github.event.pull_request.head.ref }}." \
            --head "${{ steps.vars.outputs.branch }}" \
            --base main \
            --repo ${{ matrix.repo }}
